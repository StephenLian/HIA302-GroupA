# -*- coding: utf-8 -*-
"""Dura_HIA302_2022_Group A.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1AuNAy9YWMvtAf8gGQ7SaeeWGjw_GnNUs
"""

from google.colab import drive
drive.mount('/content/drive')

# Commented out IPython magic to ensure Python compatibility.
# %pwd

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/drive/My Drive/HIA302 Group Project

# Commented out IPython magic to ensure Python compatibility.
# %pwd

#libraries
import csv
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

"""**DATA SOURCING / DATA FORMAT** """

dataset_icu = pd.read_csv('https://raw.githubusercontent.com/StephenLian/HIA302-GroupA/main/icu.csv')

dataset_malaysia = pd.read_csv('https://raw.githubusercontent.com/StephenLian/HIA302-GroupA/main/cases_malaysia.csv')

"""**PRELIMINARY DATA PROFILING**

*Rview data types and length*

1. dataset_icu
"""

dataset_icu.dtypes

print("ICU data set dimensions : {}".format(dataset_icu.shape))

"""2. dataset_malaysia"""

dataset_malaysia.dtypes

print("covid19 Malaysia data set dimensions : {}".format(dataset_malaysia.shape))

"""*Preliminary data profiling using Python DataFrame*

1. dataset_icu
"""

dataset_icu.head().T

dataset_icu.tail().T

dataset_icu.dtypes

print("ICU data set dimensions : {}".format(dataset_icu.shape))

dataset_icu.describe().T

print (dataset_icu)
print (dataset_icu.isnull())

"""2. dataset_malaysia"""

dataset_malaysia.head().T

dataset_malaysia.tail().T

dataset_malaysia.dtypes

print("Malaysia data set dimensions : {}".format(dataset_malaysia.shape))

dataset_malaysia.describe().T

print (dataset_malaysia)
print (dataset_malaysia.isnull())

"""**DATA PREPARATION**

*Data Extraction*

1. dataset_icu
"""

# group the date in dataset_icu
date_icu = dataset_icu['date'].unique()
date_icu

# total daily covid19 icu cases using groupby date
total_icu = dataset_icu['icu_covid'].groupby(dataset_icu['date'])

total_icu = total_icu.sum()

print(total_icu)

"""2. dataset_malaysia

*extract column for date and new covid19 cases*
"""

date_malaysia = dataset_malaysia['date']
date_malaysia

daily_covid = dataset_malaysia['cases_new']
daily_covid

"""**Combining Data from Multiple sources**
*Using JOIN method*

- Create dataframe (combine from dataset_icu & dataset_malaysia)
"""

#List 1
date_icu 

# List 2
total_icu

# List of tuples
list_of_tuples = list(zip(date_icu, total_icu))

# create df_cases
df_icu_daily = pd.DataFrame(list_of_tuples,
                        columns = ['date','icu cases'])

df_icu_daily

#List 3
date_malaysia

# List 4
daily_covid

# List of tuples
list_of_tuples = list(zip(date_malaysia, daily_covid))

# create df_cases
df_daily = pd.DataFrame(list_of_tuples,
                        columns = ['date','daily cases'])

df_daily

# combine 2 dataframe using JOIN
df_icu_daily = pd.merge(df_icu_daily, df_daily, how='outer')
df_icu_daily

# include percentage (icu_cases/daily cases)*100 in the df_icu_daily
df_icu_daily['%'] = 100 * df_icu_daily['icu cases']/df_icu_daily.groupby('date')['daily cases'].transform('sum')
print(df_icu_daily)

df_icu_daily

"""*Incremental extraction based on time stamp*
1st August 2022 - November 2022
"""

# ensure date format
df_icu_daily['date'] = pd.to_datetime(df_icu_daily['date'])
df_icu_daily

# create a boolean mask to select range between 2 dates
start_date = '2022-08-01'
end_date = '2022-11-30'

mask = (df_icu_daily['date'] >= start_date) & (df_icu_daily['date']<= end_date)
df_icu_daily1 = df_icu_daily.loc[mask] 

df_icu_daily1

"""**Data Cleaning**
for df_icu_daily1 (date : 1st Aug 2022 - 30th Nov 2022)

*Assess data quality**
"""

# check for coverage and completeness
df_icu_daily1.head()

# check for coverage and completeness
df_icu_daily1.tail()

# check for outliers
df_icu_daily1.describe().T

# check for missing values
df_icu_daily1.isnull()

# check for duplication
# find the length of the list
print(len(df_icu_daily1['date']))

# create a set from df_icu_daily1['date']
mydate = set(df_icu_daily1['date'])

# find length of mydate
print(len(mydate))
# compare the length between 2 list
if len(df_icu_daily1['date']) !=len(mydate):
  print("duplicates found in the list")
else:
  print("No duplicates found in the list")

# check outliers for daily cases in df_icu_daily1
sns.boxplot(df_icu_daily1['daily cases'])

# check outliers for icu cases in df_icu_daily1
sns.boxplot(df_icu_daily1['icu cases'])

# First sorting the dataset
sorted(df_icu_daily1)

# Finding 1st & 3rd quartile for daily cases
q1, q3= np.percentile(df_icu_daily1['daily cases'],[25,75])
q1, q3

iqr = q3 - q1
iqr

lower_bound = q1 -(1.5 * iqr) 
lower_bound

upper_bound = q3 +(1.5 * iqr) 
upper_bound

print("daily q1 is{}",(q1))
print("daily q3 is{}",(q3))
print("daily iqr is{}",(iqr))
print("daily lower bound is{}",(lower_bound))
print("daily upper bound is{}",(upper_bound))

"""IQR for daily cases = 1240.75

lower_bound is 7.375 and upper bound is 4970.38, so anything outside of 7.375 and 4970.38 is an outlier.
"""

df_icu_daily1.loc[df_icu_daily1['daily cases'] < lower_bound]

df_icu_daily1.loc[df_icu_daily1['daily cases'] > upper_bound]

"""Outliers for daily cases is 5330 on 3rd August 2022"""

# Finding 1st & 3rd quartile for icu cases
q11, q33= np.percentile(df_icu_daily1['icu cases'],[25,75])
q11, q33

iqr13 = q33 - q11
iqr13

lower_bound13 = q11 -(1.5 * iqr13) 
lower_bound13

upper_bound13 = q33 +(1.5 * iqr13) 
upper_bound13

print("icu q1 is{}",(q11))
print("icu q3 is{}",(q33))
print("icu iqr is{}",(iqr13))
print("icu lower bound is{}",(lower_bound13))
print("icu upper bound is{}",(upper_bound13))

df_icu_daily1.loc[df_icu_daily1['icu cases'] < lower_bound13]

df_icu_daily1.loc[df_icu_daily1['icu cases'] > upper_bound13]

"""No outlier for icu cases in df_icu_daily1

**Remove the outlier in df_icu_daily1 for daily cases column**

*1.Select required data
2.Find the row that specifies the specified condition using query() method
3. Use drop() method and pass the index of the fetched row as a parameter in the drop method.*
"""

df_icu_daily1.shape
display(df_icu_daily1.shape)

df_icu_daily1.head()

outlier_daily = df_icu_daily1.loc[df_icu_daily1['daily cases'] > upper_bound]

df_icu_daily1.shape

outlier = df_icu_daily1.loc[df_icu_daily1['daily cases'] > upper_bound]
outlier

# Check the initial shape of the DataFrame (df_icu_daily1)
 ## 122 rows with 4 columns

# Delete rows which case numbers = 5330
# This deletion is completed by "selecting" rows where case numbers are non zero
df_icu_daily1 = df_icu_daily1.loc[df_icu_daily1["daily cases"] !=5330]
print("new df is:", df_icu_daily1.shape)

# Check the initial shape of the DataFrame (df_icu_daily1)
df_icu_daily1.shape

"""**DESCRIPTIVE ANALYSIS**

*Measure of central tendency*

1. Mean
"""

import statistics
print('Mean of daily cases: {}'.format(df_icu_daily1['daily cases'].mean()))

print('Mean of icu cases: {}'.format(df_icu_daily1['icu cases'].mean()))

"""2. Median"""

print('Median of daily cases: {}'.format(df_icu_daily1['daily cases'].median()))

print('Median of icu cases: {}'.format(df_icu_daily1['icu cases'].median()))

mode=df_icu_daily1['daily cases'].mode()
print('Mode of daily cases: {}'.format(mode))

mode=df_icu_daily1['icu cases'].mode()
print('Mode of icu cases: {}'.format(mode))

"""Daily cases central tendency"""

mean_daily = df_icu_daily1['daily cases'].mean()
median_daily = df_icu_daily1['daily cases'].median()
mode_daily = df_icu_daily1['daily cases'].mode()

f, (ax_box, ax_hist) = plt.subplots(2, sharex=True, gridspec_kw= {"height_ratios": (0.2, 1)})
sns.boxplot(df_icu_daily1['daily cases'], ax=ax_box)
ax_box.axvline(mean_daily, color='r', linestyle='--')
ax_box.axvline(median_daily, color='g', linestyle='-')
ax_box.axvline(mode_daily.all(), color='b', linestyle='-')
sns.distplot(df_icu_daily1['daily cases'], ax=ax_hist)
ax_hist.axvline(mean_daily, color='r', linestyle='--')
ax_hist.axvline(median_daily, color='g', linestyle='-')
ax_hist.axvline(mode_daily.all(), color='b', linestyle='-')
plt.legend({'Mean':mean_daily,'Median':median_daily,'Mode':mode_daily})
ax_box.set(xlabel='')
plt.show()

"""Central tendency for icu cases"""

mean_icu = df_icu_daily1['icu cases'].mean()
median_icu = df_icu_daily1['icu cases'].median()
mode_icu = df_icu_daily1['icu cases'].mode()

f, (ax_box, ax_hist) = plt.subplots(2, sharex=True, gridspec_kw= {"height_ratios": (0.2, 1)})
sns.boxplot(df_icu_daily1['icu cases'], ax=ax_box)
ax_box.axvline(mean_icu, color='r', linestyle='--')
ax_box.axvline(median_icu, color='g', linestyle='-')
ax_box.axvline(mode_icu.all(), color='b', linestyle='-')
sns.distplot(df_icu_daily1['icu cases'], ax=ax_hist)
ax_hist.axvline(mean_icu, color='r', linestyle='--')
ax_hist.axvline(median_icu, color='g', linestyle='-')
ax_hist.axvline(mode_icu.all(), color='b', linestyle='-')
plt.legend({'Mean':mean_icu,'Median':median_icu,'Mode':mode_icu})
ax_box.set(xlabel='')
plt.show()

"""*Check for skewness*

1. daily cases
"""

from scipy.stats import skew
print('Skewness of daily cases: {}'.format(skew(df_icu_daily1['daily cases'])))

"""2. icu cases"""

print('Skewness of icu cases: {}'.format(skew(df_icu_daily1['icu cases'])))

"""*Measure for dispersion*

1. Range
"""

r=x.max()-x.min()
print('Range: ',r)
Output: Range: 3.6000000000000005

max_daily = df_icu_daily1['daily cases'].max()
min_daily = df_icu_daily1['daily cases'].min()
r_daily = max_daily - min_daily
print("Rnge daily cases: ", r_daily)

max_icu = df_icu_daily1['icu cases'].max()
min_icu = df_icu_daily1['icu cases'].min()
r_icu = max_icu - min_icu
print("Rnge icu cases: ", r_icu)

# 1. daily cases
fig1, ax1 = plt.subplots()
ax1.set_title('BoxPlot for daily cases')
ax1.boxplot(df_icu_daily1['daily cases'])

# 2. icu cases
fig2, ax2 = plt.subplots()
ax2.set_title('BoxPlot for icu cases')
ax2.boxplot(df_icu_daily1['icu cases'])

Q1=np.percentile(df_icu_daily1['daily cases'], 25) 
Q2=np.percentile(df_icu_daily1['daily cases'], 50)  
Q3=np.percentile(df_icu_daily1['daily cases'], 75)
print('Q1 daily cases: {}'.format(Q1))
print('Q2 daily cases: {}'.format(Q2))
print('Q3 daily cases: {}'.format(Q3))

q11, q22,q33= np.percentile(df_icu_daily1['icu cases'],[25,50,75])
print('Q1 icu cases: {}'.format(q11))
print('Q2 icu cases: {}'.format(q22))
print('Q3 icu cases: {}'.format(q33))

"""*Standard deviation*

1. daily_cases
"""

sigma_daily=np.std(df_icu_daily1['daily cases'])
print(sigma_daily)

"""2. icu_cases"""

sigma_icu=np.std(df_icu_daily1['icu cases'])
print(sigma_icu)

"""USING GROUP BY MONTH"""

icu_month = df_icu_daily1.groupby(df_icu_daily1.date.dt.month)['icu cases'].sum()
print(icu_month)

case_month = df_icu_daily1.groupby(df_icu_daily1.date.dt.month)['daily cases'].sum()
case_month

# create dataframe (monthly)
#List 1
month = ('August','September','October','November')

#List 2
icu_month = (2078,1814,1388,333)

#List 3
case_month = (102571,58255,62085,20574)

list_of_tupples = list(zip(month,icu_month,case_month))

df_month = pd.DataFrame(list_of_tupples,
                        columns = ['month','icu','case'])

df_month

# % icu cases over daily cases per month
df_month['%'] = 100 * df_month['icu']/df_month.groupby('month')['case'].transform('sum')
print(df_month)

print(df_month)
print("df_month shape is:", df_month.shape)

"""**DATA VISUALIZATION**

"""

import numpy as np
import matplotlib.pyplot as plt

x_month = df_month['month']
y_icu = df_month['icu']


plt.barh(x_month,y_icu)
plt.title('Covid19 icu cases in Malaysia (Aug - Nov 2022)')
plt.show()

x_month = df_month['month']
y_newcase = df_month['case']


plt.barh(x_month,y_newcase)
plt.title('Covid19 icu cases in Malaysia (Aug - Nov 2022)')
plt.show()

from scipy.ndimage import label
# stacked bar plot
# create data

x_month
y_newcase
y_icu

#plot bars in stack manner
plt.bar(x_month, y_newcase, color='b', label='new cases')
plt.bar(x_month,y_icu, bottom=y_newcase, color='r', label='icu cases')
plt.title('Stack bar chart for monthly icu and total new covid-19 cases')
plt.xlabel('month')
plt.ylabel('total cases')
plt.show()

x_date = df_icu_daily1['date']
y_newcase1 = df_icu_daily1['daily cases']
y_icu1 = df_icu_daily1['icu cases']

plt.bar(x_date, y_newcase1, color='b')
plt.bar(x_date, y_icu1, bottom=y_newcase1, color='r')
plt.title('stack bar chart for daily icu and new covid19 cases')
plt.xlabel('date')
plt.ylabel('covid19 cases')
plt.show()